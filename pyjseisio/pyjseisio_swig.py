# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyjseisio_swig', [dirname(__file__)])
        except ImportError:
            import _pyjseisio_swig
            return _pyjseisio_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pyjseisio_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyjseisio_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pyjseisio_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyjseisio_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyjseisio_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyjseisio_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyjseisio_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyjseisio_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyjseisio_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyjseisio_swig.SwigPyIterator_copy(self)

    def next(self):
        return _pyjseisio_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _pyjseisio_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _pyjseisio_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyjseisio_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyjseisio_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyjseisio_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyjseisio_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyjseisio_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyjseisio_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyjseisio_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyjseisio_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyjseisio_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyjseisio_swig.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyjseisio_swig.DoubleVector___bool__(self)

    def __len__(self):
        return _pyjseisio_swig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyjseisio_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyjseisio_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyjseisio_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyjseisio_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyjseisio_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyjseisio_swig.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyjseisio_swig.DoubleVector_pop(self)

    def append(self, x):
        return _pyjseisio_swig.DoubleVector_append(self, x)

    def empty(self):
        return _pyjseisio_swig.DoubleVector_empty(self)

    def size(self):
        return _pyjseisio_swig.DoubleVector_size(self)

    def swap(self, v):
        return _pyjseisio_swig.DoubleVector_swap(self, v)

    def begin(self):
        return _pyjseisio_swig.DoubleVector_begin(self)

    def end(self):
        return _pyjseisio_swig.DoubleVector_end(self)

    def rbegin(self):
        return _pyjseisio_swig.DoubleVector_rbegin(self)

    def rend(self):
        return _pyjseisio_swig.DoubleVector_rend(self)

    def clear(self):
        return _pyjseisio_swig.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyjseisio_swig.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyjseisio_swig.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyjseisio_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyjseisio_swig.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyjseisio_swig.DoubleVector_push_back(self, x)

    def front(self):
        return _pyjseisio_swig.DoubleVector_front(self)

    def back(self):
        return _pyjseisio_swig.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyjseisio_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyjseisio_swig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyjseisio_swig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyjseisio_swig.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyjseisio_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _pyjseisio_swig.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pyjseisio_swig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class LongVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyjseisio_swig.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyjseisio_swig.LongVector___nonzero__(self)

    def __bool__(self):
        return _pyjseisio_swig.LongVector___bool__(self)

    def __len__(self):
        return _pyjseisio_swig.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _pyjseisio_swig.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyjseisio_swig.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyjseisio_swig.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyjseisio_swig.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyjseisio_swig.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyjseisio_swig.LongVector___setitem__(self, *args)

    def pop(self):
        return _pyjseisio_swig.LongVector_pop(self)

    def append(self, x):
        return _pyjseisio_swig.LongVector_append(self, x)

    def empty(self):
        return _pyjseisio_swig.LongVector_empty(self)

    def size(self):
        return _pyjseisio_swig.LongVector_size(self)

    def swap(self, v):
        return _pyjseisio_swig.LongVector_swap(self, v)

    def begin(self):
        return _pyjseisio_swig.LongVector_begin(self)

    def end(self):
        return _pyjseisio_swig.LongVector_end(self)

    def rbegin(self):
        return _pyjseisio_swig.LongVector_rbegin(self)

    def rend(self):
        return _pyjseisio_swig.LongVector_rend(self)

    def clear(self):
        return _pyjseisio_swig.LongVector_clear(self)

    def get_allocator(self):
        return _pyjseisio_swig.LongVector_get_allocator(self)

    def pop_back(self):
        return _pyjseisio_swig.LongVector_pop_back(self)

    def erase(self, *args):
        return _pyjseisio_swig.LongVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyjseisio_swig.new_LongVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyjseisio_swig.LongVector_push_back(self, x)

    def front(self):
        return _pyjseisio_swig.LongVector_front(self)

    def back(self):
        return _pyjseisio_swig.LongVector_back(self)

    def assign(self, n, x):
        return _pyjseisio_swig.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _pyjseisio_swig.LongVector_resize(self, *args)

    def insert(self, *args):
        return _pyjseisio_swig.LongVector_insert(self, *args)

    def reserve(self, n):
        return _pyjseisio_swig.LongVector_reserve(self, n)

    def capacity(self):
        return _pyjseisio_swig.LongVector_capacity(self)
    __swig_destroy__ = _pyjseisio_swig.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _pyjseisio_swig.LongVector_swigregister
LongVector_swigregister(LongVector)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyjseisio_swig.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyjseisio_swig.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyjseisio_swig.StringVector___bool__(self)

    def __len__(self):
        return _pyjseisio_swig.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyjseisio_swig.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyjseisio_swig.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyjseisio_swig.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyjseisio_swig.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyjseisio_swig.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyjseisio_swig.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyjseisio_swig.StringVector_pop(self)

    def append(self, x):
        return _pyjseisio_swig.StringVector_append(self, x)

    def empty(self):
        return _pyjseisio_swig.StringVector_empty(self)

    def size(self):
        return _pyjseisio_swig.StringVector_size(self)

    def swap(self, v):
        return _pyjseisio_swig.StringVector_swap(self, v)

    def begin(self):
        return _pyjseisio_swig.StringVector_begin(self)

    def end(self):
        return _pyjseisio_swig.StringVector_end(self)

    def rbegin(self):
        return _pyjseisio_swig.StringVector_rbegin(self)

    def rend(self):
        return _pyjseisio_swig.StringVector_rend(self)

    def clear(self):
        return _pyjseisio_swig.StringVector_clear(self)

    def get_allocator(self):
        return _pyjseisio_swig.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyjseisio_swig.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyjseisio_swig.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyjseisio_swig.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyjseisio_swig.StringVector_push_back(self, x)

    def front(self):
        return _pyjseisio_swig.StringVector_front(self)

    def back(self):
        return _pyjseisio_swig.StringVector_back(self)

    def assign(self, n, x):
        return _pyjseisio_swig.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyjseisio_swig.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyjseisio_swig.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyjseisio_swig.StringVector_reserve(self, n)

    def capacity(self):
        return _pyjseisio_swig.StringVector_capacity(self)
    __swig_destroy__ = _pyjseisio_swig.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pyjseisio_swig.StringVector_swigregister
StringVector_swigregister(StringVector)

class CatalogedHdrEntryVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector___nonzero__(self)

    def __bool__(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector___bool__(self)

    def __len__(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector___len__(self)

    def __getslice__(self, i, j):
        return _pyjseisio_swig.CatalogedHdrEntryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyjseisio_swig.CatalogedHdrEntryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector___setitem__(self, *args)

    def pop(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_pop(self)

    def append(self, x):
        return _pyjseisio_swig.CatalogedHdrEntryVector_append(self, x)

    def empty(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_empty(self)

    def size(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_size(self)

    def swap(self, v):
        return _pyjseisio_swig.CatalogedHdrEntryVector_swap(self, v)

    def begin(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_begin(self)

    def end(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_end(self)

    def rbegin(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_rbegin(self)

    def rend(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_rend(self)

    def clear(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_clear(self)

    def get_allocator(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_get_allocator(self)

    def pop_back(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_pop_back(self)

    def erase(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyjseisio_swig.new_CatalogedHdrEntryVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyjseisio_swig.CatalogedHdrEntryVector_push_back(self, x)

    def front(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_front(self)

    def back(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_back(self)

    def assign(self, n, x):
        return _pyjseisio_swig.CatalogedHdrEntryVector_assign(self, n, x)

    def resize(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector_resize(self, *args)

    def insert(self, *args):
        return _pyjseisio_swig.CatalogedHdrEntryVector_insert(self, *args)

    def reserve(self, n):
        return _pyjseisio_swig.CatalogedHdrEntryVector_reserve(self, n)

    def capacity(self):
        return _pyjseisio_swig.CatalogedHdrEntryVector_capacity(self)
    __swig_destroy__ = _pyjseisio_swig.delete_CatalogedHdrEntryVector
    __del__ = lambda self: None
CatalogedHdrEntryVector_swigregister = _pyjseisio_swig.CatalogedHdrEntryVector_swigregister
CatalogedHdrEntryVector_swigregister(CatalogedHdrEntryVector)


def vectorToList(vector):
    return [vector[x] for x in xrange(vector.size())]

class headerWordInfo(object):
    """Proxy of C++ jsIO::headerWordInfo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    format = _swig_property(_pyjseisio_swig.headerWordInfo_format_get, _pyjseisio_swig.headerWordInfo_format_set)
    count = _swig_property(_pyjseisio_swig.headerWordInfo_count_get, _pyjseisio_swig.headerWordInfo_count_set)
    offset = _swig_property(_pyjseisio_swig.headerWordInfo_offset_get, _pyjseisio_swig.headerWordInfo_offset_set)

    def __init__(self):
        """__init__(jsIO::headerWordInfo self) -> headerWordInfo"""
        this = _pyjseisio_swig.new_headerWordInfo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyjseisio_swig.delete_headerWordInfo
    __del__ = lambda self: None
headerWordInfo_swigregister = _pyjseisio_swig.headerWordInfo_swigregister
headerWordInfo_swigregister(headerWordInfo)

class jsFileReader(object):
    """Proxy of C++ jsIO::jsFileReader class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _pyjseisio_swig.delete_jsFileReader
    __del__ = lambda self: None

    def __init__(self, _bufferSize=2097152):
        """
        __init__(jsIO::jsFileReader self, unsigned long const _bufferSize=2097152) -> jsFileReader
        __init__(jsIO::jsFileReader self) -> jsFileReader
        """
        this = _pyjseisio_swig.new_jsFileReader(_bufferSize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Init(self, _jsfilename, _NThreads=1):
        """
        Init(jsFileReader self, std::string const _jsfilename, int const _NThreads=1) -> int
        Init(jsFileReader self, std::string const _jsfilename) -> int
        """
        return _pyjseisio_swig.jsFileReader_Init(self, _jsfilename, _NThreads)


    def isRegular(self):
        """isRegular(jsFileReader self) -> bool"""
        return _pyjseisio_swig.jsFileReader_isRegular(self)


    def isSeisPEG(self):
        """isSeisPEG(jsFileReader self) -> bool"""
        return _pyjseisio_swig.jsFileReader_isSeisPEG(self)


    def getNtr(self):
        """getNtr(jsFileReader self) -> long"""
        return _pyjseisio_swig.jsFileReader_getNtr(self)


    def getNFrames(self):
        """getNFrames(jsFileReader self) -> long"""
        return _pyjseisio_swig.jsFileReader_getNFrames(self)


    def getHeaderWords(self, names, descriptions):
        """getHeaderWords(jsFileReader self, StringVector names, StringVector descriptions) -> int"""
        return _pyjseisio_swig.jsFileReader_getHeaderWords(self, names, descriptions)


    def getNumHeaderWords(self):
        """getNumHeaderWords(jsFileReader self) -> int"""
        return _pyjseisio_swig.jsFileReader_getNumHeaderWords(self)


    def getNumBytesInHeader(self):
        """getNumBytesInHeader(jsFileReader self) -> int"""
        return _pyjseisio_swig.jsFileReader_getNumBytesInHeader(self)


    def getNumBytesInRawFrame(self):
        """getNumBytesInRawFrame(jsFileReader self) -> long"""
        return _pyjseisio_swig.jsFileReader_getNumBytesInRawFrame(self)


    def getHeaderWordsInfo(self, pInfo):
        """getHeaderWordsInfo(jsFileReader self, headerWordInfo pInfo)"""
        return _pyjseisio_swig.jsFileReader_getHeaderWordsInfo(self, pInfo)


    def getIOBufferSize(self):
        """getIOBufferSize(jsFileReader self) -> unsigned long"""
        return _pyjseisio_swig.jsFileReader_getIOBufferSize(self)


    def getNDim(self):
        """getNDim(jsFileReader self) -> int"""
        return _pyjseisio_swig.jsFileReader_getNDim(self)


    def getAxisLen(self, index):
        """getAxisLen(jsFileReader self, int index) -> int"""
        return _pyjseisio_swig.jsFileReader_getAxisLen(self, index)


    def getAxisLogicalValues(self, index, axis):
        """getAxisLogicalValues(jsFileReader self, int index, LongVector axis) -> int"""
        return _pyjseisio_swig.jsFileReader_getAxisLogicalValues(self, index, axis)


    def getAxisPhysicalValues(self, index, axis):
        """getAxisPhysicalValues(jsFileReader self, int index, DoubleVector axis) -> int"""
        return _pyjseisio_swig.jsFileReader_getAxisPhysicalValues(self, index, axis)


    def getAxisLabels(self, axis):
        """getAxisLabels(jsFileReader self, StringVector axis) -> int"""
        return _pyjseisio_swig.jsFileReader_getAxisLabels(self, axis)


    def getAxisUnits(self, units):
        """getAxisUnits(jsFileReader self, StringVector units) -> int"""
        return _pyjseisio_swig.jsFileReader_getAxisUnits(self, units)


    def getFrameSizeOnDisk(self):
        """getFrameSizeOnDisk(jsFileReader self) -> long"""
        return _pyjseisio_swig.jsFileReader_getFrameSizeOnDisk(self)


    def getByteOrder(self):
        """getByteOrder(jsFileReader self) -> JS_BYTEORDER"""
        return _pyjseisio_swig.jsFileReader_getByteOrder(self)


    def getByteOrderAsString(self):
        """getByteOrderAsString(jsFileReader self) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getByteOrderAsString(self)


    def getTraceFormatName(self):
        """getTraceFormatName(jsFileReader self) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getTraceFormatName(self)


    def getDescriptiveName(self):
        """getDescriptiveName(jsFileReader self) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getDescriptiveName(self)


    def getDataType(self):
        """getDataType(jsFileReader self) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getDataType(self)


    def getHdrEntry(self, _name):
        """getHdrEntry(jsFileReader self, std::string _name) -> catalogedHdrEntry"""
        return _pyjseisio_swig.jsFileReader_getHdrEntry(self, _name)


    def getHdrEntries(self):
        """getHdrEntries(jsFileReader self) -> CatalogedHdrEntryVector"""
        return _pyjseisio_swig.jsFileReader_getHdrEntries(self)


    def readTraceHeader(self, *args):
        """
        readTraceHeader(jsFileReader self, int const * _position, char * headbuf) -> int
        readTraceHeader(jsFileReader self, long const _traceIndex, char * headbuf) -> int
        """
        return _pyjseisio_swig.jsFileReader_readTraceHeader(self, *args)


    def readFrameHeader(self, *args):
        """
        readFrameHeader(jsFileReader self, int const * _position, char * headbuf) -> int
        readFrameHeader(jsFileReader self, long const _frameIndex, char * headbuf) -> int
        """
        return _pyjseisio_swig.jsFileReader_readFrameHeader(self, *args)


    def readTrace(self, *args):
        """
        readTrace(jsFileReader self, int const * _position, float * trace) -> int
        readTrace(jsFileReader self, long const _traceIndex, float * trace) -> int
        """
        return _pyjseisio_swig.jsFileReader_readTrace(self, *args)


    def readTraces(self, _firstTraceIndex, _numOfTraces, buffer, headbuf=None):
        """
        readTraces(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, float * buffer, char * headbuf=None) -> long
        readTraces(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, float * buffer) -> long
        """
        return _pyjseisio_swig.jsFileReader_readTraces(self, _firstTraceIndex, _numOfTraces, buffer, headbuf)


    def readTraceHeaders(self, _firstTraceIndex, _numOfTraces, headbuf):
        """readTraceHeaders(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, char * headbuf) -> long"""
        return _pyjseisio_swig.jsFileReader_readTraceHeaders(self, _firstTraceIndex, _numOfTraces, headbuf)


    def liveToGlobalTraceIndex(self, _liveTraceIndex, _globalTraceIndex):
        """liveToGlobalTraceIndex(jsFileReader self, long const _liveTraceIndex, long & _globalTraceIndex) -> int"""
        return _pyjseisio_swig.jsFileReader_liveToGlobalTraceIndex(self, _liveTraceIndex, _globalTraceIndex)


    def readWithinLiveTraces(self, _firstTraceIndex, _numOfTraces, buffer, headbuf=None):
        """
        readWithinLiveTraces(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, float * buffer, char * headbuf=None) -> long
        readWithinLiveTraces(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, float * buffer) -> long
        """
        return _pyjseisio_swig.jsFileReader_readWithinLiveTraces(self, _firstTraceIndex, _numOfTraces, buffer, headbuf)


    def readWithinLiveTraceHeaders(self, _firstTraceIndex, _numOfTraces, headbuf):
        """readWithinLiveTraceHeaders(jsFileReader self, long const _firstTraceIndex, long const _numOfTraces, char * headbuf) -> long"""
        return _pyjseisio_swig.jsFileReader_readWithinLiveTraceHeaders(self, _firstTraceIndex, _numOfTraces, headbuf)


    def readFrame(self, *args):
        """
        readFrame(jsFileReader self, int const * _position, float * frame, char * headbuf=None) -> int
        readFrame(jsFileReader self, int const * _position, float * frame) -> int
        readFrame(jsFileReader self, long const _frameIndex, float * frame, char * headbuf=None) -> int
        readFrame(jsFileReader self, long const _frameIndex, float * frame) -> int
        """
        return _pyjseisio_swig.jsFileReader_readFrame(self, *args)


    def readRawFrames(self, *args):
        """
        readRawFrames(jsFileReader self, int const * _position, int NFrames, char * rawframe, int * numLiveTraces) -> int
        readRawFrames(jsFileReader self, long const _frameindex, int NFrames, char * rawframe, int * numLiveTraces) -> int
        """
        return _pyjseisio_swig.jsFileReader_readRawFrames(self, *args)


    def uncompressRawFrame(self, rawframe, numLiveTraces, iThread, frame, headbuf=None):
        """
        uncompressRawFrame(jsFileReader self, char * rawframe, int numLiveTraces, int iThread, float * frame, char * headbuf=None) -> int
        uncompressRawFrame(jsFileReader self, char * rawframe, int numLiveTraces, int iThread, float * frame) -> int
        """
        return _pyjseisio_swig.jsFileReader_uncompressRawFrame(self, rawframe, numLiveTraces, iThread, frame, headbuf)


    def getNumOfLiveTraces(self, _frameIndex):
        """getNumOfLiveTraces(jsFileReader self, int _frameIndex) -> int"""
        return _pyjseisio_swig.jsFileReader_getNumOfLiveTraces(self, _frameIndex)


    def getVersion(self):
        """getVersion(jsFileReader self) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getVersion(self)


    def getCustomProperty(self, _property):
        """getCustomProperty(jsFileReader self, std::string _property) -> std::string"""
        return _pyjseisio_swig.jsFileReader_getCustomProperty(self, _property)


    def getNumOfExtents(self):
        """getNumOfExtents(jsFileReader self) -> int"""
        return _pyjseisio_swig.jsFileReader_getNumOfExtents(self)


    def getNumOfVirtualFolders(self):
        """getNumOfVirtualFolders(jsFileReader self) -> int"""
        return _pyjseisio_swig.jsFileReader_getNumOfVirtualFolders(self)


    def readFrameDataOnly(self, *args):
        return _pyjseisio_swig.jsFileReader_readFrameDataOnly(self, *args)

    def readFrameDataAndHdrs(self, *args):
        return _pyjseisio_swig.jsFileReader_readFrameDataAndHdrs(self, *args)

    def readFrameHdrsOnly(self, *args):
        return _pyjseisio_swig.jsFileReader_readFrameHdrsOnly(self, *args)

    def readTraceDataAndHdr(self, traceIndex, arrayLength_reader, hdrArrayLength_reader):
        return _pyjseisio_swig.jsFileReader_readTraceDataAndHdr(self, traceIndex, arrayLength_reader, hdrArrayLength_reader)

    def readTraceHeadersOnly(self, traceIndex, numTraces, hdrArrayLength_reader):
        return _pyjseisio_swig.jsFileReader_readTraceHeadersOnly(self, traceIndex, numTraces, hdrArrayLength_reader)

    def readTracesDataOnly(self, traceIndex, numTraces, arrayLength_reader):
        return _pyjseisio_swig.jsFileReader_readTracesDataOnly(self, traceIndex, numTraces, arrayLength_reader)
jsFileReader_swigregister = _pyjseisio_swig.jsFileReader_swigregister
jsFileReader_swigregister(jsFileReader)

class catalogedHdrEntry(object):
    """Proxy of C++ jsIO::catalogedHdrEntry class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(jsIO::catalogedHdrEntry self) -> catalogedHdrEntry"""
        this = _pyjseisio_swig.new_catalogedHdrEntry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getName(self):
        """getName(catalogedHdrEntry self) -> std::string"""
        return _pyjseisio_swig.catalogedHdrEntry_getName(self)


    def getDescription(self):
        """getDescription(catalogedHdrEntry self) -> std::string"""
        return _pyjseisio_swig.catalogedHdrEntry_getDescription(self)


    def getCount(self):
        """getCount(catalogedHdrEntry self) -> int"""
        return _pyjseisio_swig.catalogedHdrEntry_getCount(self)


    def getByteCount(self):
        """getByteCount(catalogedHdrEntry self) -> int"""
        return _pyjseisio_swig.catalogedHdrEntry_getByteCount(self)


    def getFormatAsStr(self):
        """getFormatAsStr(catalogedHdrEntry self) -> std::string"""
        return _pyjseisio_swig.catalogedHdrEntry_getFormatAsStr(self)


    def getOffset(self):
        """getOffset(catalogedHdrEntry self) -> int"""
        return _pyjseisio_swig.catalogedHdrEntry_getOffset(self)


    def getByteOrder(self):
        """getByteOrder(catalogedHdrEntry self) -> JS_BYTEORDER"""
        return _pyjseisio_swig.catalogedHdrEntry_getByteOrder(self)


    def setByteOrder(self, order):
        """setByteOrder(catalogedHdrEntry self, JS_BYTEORDER order)"""
        return _pyjseisio_swig.catalogedHdrEntry_setByteOrder(self, order)


    def getFloatVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_getFloatVal(self, *args)

    def getDoubleVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_getDoubleVal(self, *args)

    def getIntVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_getIntVal(self, *args)

    def getShortVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_getShortVal(self, *args)

    def getLongVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_getLongVal(self, *args)

    def setFloatVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_setFloatVal(self, *args)

    def setDoubleVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_setDoubleVal(self, *args)

    def setIntVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_setIntVal(self, *args)

    def setShortVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_setShortVal(self, *args)

    def setLongVal(self, *args):
        return _pyjseisio_swig.catalogedHdrEntry_setLongVal(self, *args)


    def getVal(self, hdrBuf):
        """ 
        Get the value of a header from a single trace header buffer. 
        The format of the returned value is inferred from the 
        getFormatAsStr() method.
        """
        frmt = self.getFormatAsStr();
        return {
            'float': self.getFloatVal,
            'double': self.getDoubleVal,
            'short': self.getShortVal,
            'long': self.getLongVal,
            'int': self.getIntVal,
            'int8': self.getIntVal,
            'int16': self.getIntVal,
            'int32': self.getIntVal,
            'int64': self.getLongVal
        }.get(frmt)(hdrBuf)

    def getVals(self, hdrBuf):
        """ 
        Get the values of a header from a multi-trace header buffer. 
        The format of the returned value is inferred from the 
        getFormatAsStr() method.
        Returns a standard Python list of the header values from the
        provided header buffer. 
        """
        ntraces = hdrBuf.shape[0]
        return [self.getVal(hdrBuf[i,:]) for i in xrange(ntraces)]

    def setVal(self, hdrBuf, value):
        """ 
        Set the value of a header in a header buffer. 
        The format of the set value is inferred from the 
        getFormatAsStr() method.
        """
        frmt = self.getFormatAsStr();
        return {
            'float': self.setFloatVal,
            'double': self.setDoubleVal,
            'int': self.setIntVal,
            'short': self.setShortVal,
            'long': self.setLongVal
        }.get(frmt)(hdrBuf,value)

    def setVals(self, hdrBuf, values):
        """ 
        Set the values of a header from a multi-trace header buffer. 
        """
        assert hdrBuf.shape[0]==len(values), \
            "require hdrBuf.shape[0]==len(values)"
        ntraces = hdrBuf.shape[0]
        return [self.setVal(hdrBuf[i,:], values[i]) for i in xrange(ntraces)]


    __swig_destroy__ = _pyjseisio_swig.delete_catalogedHdrEntry
    __del__ = lambda self: None
catalogedHdrEntry_swigregister = _pyjseisio_swig.catalogedHdrEntry_swigregister
catalogedHdrEntry_swigregister(catalogedHdrEntry)


_pyjseisio_swig.JSIO_LITTLEENDIAN_swigconstant(_pyjseisio_swig)
JSIO_LITTLEENDIAN = _pyjseisio_swig.JSIO_LITTLEENDIAN

_pyjseisio_swig.JSIO_BIGENDIAN_swigconstant(_pyjseisio_swig)
JSIO_BIGENDIAN = _pyjseisio_swig.JSIO_BIGENDIAN

def nativeOrder():
    """nativeOrder() -> jsIO::JS_BYTEORDER"""
    return _pyjseisio_swig.nativeOrder()

def endian_swap(a, n, nb):
    """endian_swap(void * a, int n, int nb)"""
    return _pyjseisio_swig.endian_swap(a, n, nb)


